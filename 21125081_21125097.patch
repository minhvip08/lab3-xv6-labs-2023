diff --git a/answers-pgtbl.txt b/answers-pgtbl.txt
new file mode 100644
index 0000000..697c5d4
--- /dev/null
+++ b/answers-pgtbl.txt
@@ -0,0 +1,4 @@
+Which other xv6 system call(s) could be made faster using this shared page? Explain how.
+Any system use purely for information retrieval, such as getID. Because system use directly id by using getid, the operation system does not use trapping. Hence the data can handle in usermode
+
+Explain the output of vmprint in terms of Fig 3-4 from the text. What does page 0 contain? What is in page 2? When running in user mode, could the process read/write the memory mapped by page 1?
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..15e546b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
+
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..158140d 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,6 +128,9 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1) 
+    vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..6a0411b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -121,6 +121,8 @@ allocproc(void)
   }
   return 0;
 
+  
+
 found:
   p->pid = allocpid();
   p->state = USED;
@@ -132,6 +134,14 @@ found:
     return 0;
   }
 
+// Allocate a usyscall page.
+  if ((p->usyscallpagetable = (struct usyscall *)kalloc()) == 0) {
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  p->usyscallpagetable->pid = p->pid;
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -161,6 +171,9 @@ freeproc(struct proc *p)
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
+  if (p->usyscallpagetable)
+    kfree((void *)p->usyscallpagetable);
+  p->usyscallpagetable = 0;
   p->sz = 0;
   p->pid = 0;
   p->parent = 0;
@@ -183,6 +196,12 @@ proc_pagetable(struct proc *p)
   if(pagetable == 0)
     return 0;
 
+  if(mappages(pagetable, USYSCALL, PGSIZE,
+              (uint64)(p->usyscallpagetable), PTE_U | PTE_R) < 0){
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
@@ -212,7 +231,9 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
+
 }
 
 // a user program that calls exec("/init")
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d97b375 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct usyscall *usyscallpagetable;
+  
+  
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..9235183 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_A (1L << 6) // accessed status
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 88644b2..a438dac 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -74,7 +74,23 @@ sys_sleep(void)
 int
 sys_pgaccess(void)
 {
-  // lab pgtbl: your code here.
+  uint64 startaddr;
+  int npage;
+  uint64 useraddr;
+  argaddr(0, &startaddr);
+  argint(1, &npage);
+  argaddr(2, &useraddr);
+
+  uint64 bitmask = 0;
+  struct proc *p = myproc();
+  for (int i = 0; i < npage; ++i) {
+    pte_t *pte = walk(p->pagetable, startaddr+i*PGSIZE, 0);
+    if (*pte & PTE_A) {
+      bitmask |= (1 << i);
+      *pte &= ~PTE_A;
+    }
+  }
+  copyout(p->pagetable, useraddr, (char *)&bitmask, sizeof(bitmask));
   return 0;
 }
 #endif
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..4d39132 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -293,6 +293,34 @@ freewalk(pagetable_t pagetable)
   kfree((void*)pagetable);
 }
 
+
+// Recursively free page-table pages for printing table
+void
+printpagetable(pagetable_t pagetable, int depth)
+{
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if(pte & PTE_V){
+      printf("..");
+      for(int j = 0; j < depth;j++) {
+        printf(" ..");
+      }
+      printf("%d: pte %p pa %p\n", i, pte, PTE2PA(pte));
+
+      if(depth < 2) {
+        uint64 child = PTE2PA(pte);
+        printpagetable((pagetable_t)child, depth + 1);
+      }
+    }
+  }
+}
+
+void
+vmprint(pagetable_t pagetable) {
+  printf("page table %p\n", pagetable);
+  printpagetable(pagetable, 0);
+}
+
 // Free user memory pages,
 // then free page-table pages.
 void
